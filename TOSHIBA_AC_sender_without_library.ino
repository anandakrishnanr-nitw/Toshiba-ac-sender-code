// working code...

/*
 * IRSendRaw.ino   Rev 1
 * Sends raw IR data on D10
 * For Uno, Nano, Pro Mini
 * No libraries needed
 * Sends automatically on boot.  Hit reset to send again.
 * Timing entries fetched directly from flash - PROGMEM
 * Circuit must turn on IR LED when D10 is high
 */

const byte irLED = 10;                                    // Timer 1 "B" output: OC1B
volatile unsigned int irCount;
volatile unsigned int newirCount;
volatile unsigned int irK;
unsigned int oldirK, first1;
byte oldTIMSK0;
unsigned long countDiv, halfDiv;

// raw definition arrays must be global

const unsigned int ON[] PROGMEM = {55098,   607,   941,   554,   996,  2577,   941,  2576,
   941,   614,   935,   589,   961,  2576,   942,  2575,
   943,  2577,   942,  2576,   943,  2574,   944,   611,
   937,   612,   938,   610,   939,  2575,   944,   587,
   962,  2574,   943,   587,   963,   586,   963,   586,
   963,   586,   963,   587,   962,   586,   964,   586,
   963,  2575,   943,   586,   963,   586,   964,   585,
   963,  2575,   944,   585,   963,   587,   963,   585,
   963,   587,   963,   585,   964,   585,   964,   585,
   964,   586,   963,   585,   964,   586,   963,   586,
   963,   586,   963,   587,   962,   586,   963,   585,
   963,   587,   963,   586,   963,   586,   963,   606,
   942,   586,   964,   586,   962,   587,   962,   587,
   963,  2573,   945,  2574,   943,   606,   944,  2574,
   943,   606,   942,   605,   945,   605,   944,   605,944,   605,   944,   604,   944,   606,   943,   605,
   944,   605,   943,   606,   944,   605,   944,   605,
   943,   606,   942,   606,   943,   606,   942,   608,
   941,  2574,   943,  2575,   942,   608,   941,  2577,
   941,   608,   940,  2578,   942,   606,   944,  2575,
  1011};

const unsigned int OFF[] PROGMEM = {55483,   578,   970,   578,   971,  2573,   946,  2572,
   946,   578,   971,   579,   971,  2572,   946,  2573,
   946,  2572,   946,  2572,   946,  2573,   946,   578,
   971,   578,   971,   579,   970,  2572,   947,   576,
   973,   578,   971,   579,   970,   577,   972,   576,
   973,   578,   971,   578,   971,   578,   971,   577,
   972,   576,   972,   578,   972,   577,   972,   579,
   971,  2572,   947,  2572,   946,  2573,   946,   578,
   971,   578,   971,   579,   970,   579,   971,   577,
   973,   577,   972,   578,   971,   578,   972,   577,
   973,   577,   972,   577,   973,   578,   971,   578,
   972,   577,   972,   578,   972,   577,   972,   577,
   973,   578,   971,   578,   971,  2573,   946,   578, 971,   578,   971,   579,   971,   578,   971,  2573,
   945,   578,   971,   579,   970,   578,   972,   578,
   971,   579,   971,   578,   971,   578,   971,   579,
   971,   578,   971,   579,   971,   578,   971,   578,
   972,   578,   971,   578,   972,  2548,   971,  2548,
   970,  2548,   971,   578,   972,  2547,   971,  2549,
   970,  2549,   969,   578,   972,   578,   971,   578,
   971};

const unsigned int A[] PROGMEM = {42103,   535,  1011,   537,  1009,  2489,  1029,  2488,
  1026,   542,   949,   600,   921,  2595,   923,  2594,
   922,  2594,   916,  2600,   916,  2600,   918,   631,
   917,   632,   916,   632,   917,  2600,   938,   611,
   940,  2576,   941,   608,   939,   609,   940,   609,
   939,   609,   940,   610,   939,   611,   937,   609,
   940,  2578,   940,   609,   940,   609,   940,   608,
   940,   583,   966,   609,   940,   608,   941,   607,
   942,   605,   943,   609,   940,   609,   941,   607,
   941,   608,   941,   607,   942,   607,   942,   605,
   944,   606,   941,   607,   943,   606,   942,   608,
   942,   605,   943,   602,   947,   605,   944,   606,
   943,   605,   944,   605,   943,   604,   944,   605,944,  2572,   944,  2573,   944,  2572,   945,  2572,
   945,   605,   943,   605,   944,   605,   943,   606,
   943,   606,   942,   606,   942,   607,   942,   606,
   942,   606,   942,   606,   943,   605,   943,   606,
   943,   605,   942,   606,   943,   605,   942,   606,
   943,  2573,   943,  2572,   944,   606,   942,  2573,
   921,  2595,   921,   629,   943,  2572,   944,  2573,
   943};

const unsigned int B[] PROGMEM = {40970,   581,   969,   580,   969,  2571,   947,  2570,
   947,   581,   969,   580,   969,  2571,   947,  2571,
   948,  2571,   947,  2570,   949,  2569,   948,   580,
   970,   579,   970,   579,   970,  2570,   948,   579,
   970,  2570,   948,   579,   970,   579,   971,   579,
   969,   580,   969,   580,   970,   579,   970,   580,
   969,   580,   969,   580,   969,   580,   969,   580,
   970,   579,   970,   579,   970,   580,   970,  2569,
   949,   579,   971,   578,   970,   580,   969,   580,
   970,   579,   970,   580,   969,   580,   970,   580,
   969,   580,   970,   580,   969,   580,   970,   579,
   970,   579,   970,   580,   970,   579,   970,   580,
   970,   579,   970,   580,   969,  2570,   949,   579,
   971,   579,   969,  2570,   948,  2570,   949,  2569,950,   580,   969,   580,   969,   580,   969,   580,
   970,   578,   970,   580,   970,   578,   971,   579,
   969,   580,   969,   580,   969,   579,   970,   580,
   969,   579,   970,   580,   970,  2569,   948,  2569,
   949,   580,   969,   580,   969,  2550,   968,  2550,
   968,  2550,   968,  2550,   968,  2550,   968,  2549,
   969};

const unsigned int C[] PROGMEM = {26888,   613,   936,   613,   937,  2576,   944,  2575,
   944,   610,   939,   611,   938,  2575,   943,  2575,
   944,  2575,   944,   588,   961,   587,   962,   587,
   963,   587,   963,   586,   962,  2575,   945,   585,
   963,  2575,   944,   586,   964,   585,   963,   587,
   963,   585,   964,   586,   963,   586,   964,   585,
   964,   586,   963,   585,   964,   586,   963,   586,
   964,   585,   964,   586,   964,  2575,   944,   584,
   964,   586,   964,   585,   964,   585,   964,   586,
   963,   586,   964,   585,   964,   586,   963,   585,
   964,   586,   964,   585,   964,   586,   963,   585,
   964,   586,   963,   585,   964,   586,   963,   586,
   963,   586,   963,   586,   964,  2574,   945,   584,
   965,  2574,   944,   586,   963,  2575,   944,  2574,944,   584,   965,   584,   965,   584,   965,   585,
   965,   584,   965,   584,   965,   584,   965,   584,
   966,   583,   966,   583,   967,   583,   966,   582,
   966,   584,   966,   584,   966,  2572,   946,  2573,
   946,  2572,   947,   582,   967,   583,   967,  2571,
   947,  2572,   946,   583,   966,  2571,   947,   584,
   965};

const unsigned int D[] PROGMEM = {939,   535,  1014,   571,   978,  2577,   941,  2577,
   941,   610,   937,   588,   961,  2576,   943,  2575,
   942,  2575,   943,  2575,   943,  2575,   943,   609,
   940,   610,   938,   587,   962,  2574,   943,   586,
   964,  2573,   944,   587,   962,   586,   962,   585,
   964,   607,   942,   587,   962,   585,   964,   605,
   943,  2573,   944,   606,   943,   587,   962,   587,
   962,   585,   963,   586,   963,  2574,   944,  2573,
   944,   588,   961,   586,   963,   585,   964,   585,
   963,   606,   943,   605,   944,   585,   963,   586,
   963,   585,   963,   586,   963,   585,   963,   586,
   962,   587,   962,   585,   963,   587,   962,   586,
   963,   586,   962,   585,   963,   586,   963,  2573,944,   587,   961,   587,   962,   587,   961,   587,
   962,   586,   963,   586,   963,   586,   962,   587,
   962,   586,   962,   586,   963,   586,   963,   585,
   963,   586,   963,   587,   961,   587,   962,   587,
   962,   586,   962,   587,   962,   607,   941,   607,
   941,  2575,   943,  2574,   943,   608,   941,  2574,
   943,   608,   940,  2575,   943,  2575,   942,  2575,
   942};

const unsigned int E[] PROGMEM = {12065,   534,  1015,   533,  1015,  2483,  1033,  2485,
  1027,   541,   973,   575,   921,  2595,   917,  2601,
   939,  2577,   940,  2576,   940,  2577,   940,   608,
   940,   608,   941,   609,   940,  2577,   940,   609,
   939,  2578,   939,   611,   939,   610,   939,   608,
   940,   616,   933,   614,   935,   592,   957,   554,
   994,  2578,   940,   547,  1001,   609,   941,   609,
   940,   609,   938,  2579,   940,   609,   939,   609,
   941,   609,   940,   608,   940,   609,   941,   607,
   941,   609,   940,   609,   941,   608,   965,   583,
   941,   609,   940,   608,   940,   608,   941,   609,
   940,   608,   941,   608,   941,   608,   940,   609,
   941,   608,   941,   608,   940,   609,   940,  2576, 917,   633,   939,   609,   916,   633,   916,  2600,
   917,   632,   917,   632,   916,   633,   916,   632,
   916,   633,   916,   632,   917,   632,   916,   632,
   917,   632,   917,   632,   917,   631,   917,   632,
   917,   632,   917,   631,   918,   631,   917,   632,
   917,  2600,   919,  2599,   943,   605,   944,  2554,
  1027,   541,  1010,  2488,  1031,   537,  1012,  2485,
  1032};

const unsigned int F[] PROGMEM = {48106,   612,   936,   612,   937,  2575,   941,  2576,
   941,   613,   936,   613,   935,  2575,   942,  2574,
   942,  2575,   941,  2575,   942,  2575,   941,   614,
   934,   614,   934,   611,   938,  2577,   940,   609,
   939,  2579,   938,   610,   939,   610,   939,   609,
   961,   588,   916,   633,   918,   630,   975,   574,
  1014,  2484,  1028,   541,  1003,   545,   977,   573,
   974,   575,   972,  2523,   992,   578,   971,  2524,
   992,   578,   970,   579,   970,   577,   971,   579,
   969,   579,   969,   580,   970,   578,   970,   578,
   971,   578,   971,   578,   971,   578,   972,   577,
   972,   577,   972,   577,   971,   578,   971,   577,
   972,   577,   971,   577,   972,   576,   973,  2522,997,   572,   977,   571,  1004,  2493,  1024,   545,
  1007,   542,  1009,   539,  1011,   538,  1013,   536,
  1013,   535,  1014,   535,  1014,   534,  1014,   534,
  1015,   534,  1010,   538,   981,   568,   974,   575,
   944,   605,   920,   628,   920,   630,   918,   629,
   920,  2598,   919,  2598,   920,   629,   920,  2596,
   945,   604,   943,   606,   946,  2572,   973,  2544,
  1006};


const unsigned int G[] PROGMEM = {63827,   586,   963,   585,   963,  2574,   943,  2573,
   944,   584,   965,   583,   965,  2573,   945,  2573,
   945,  2572,   945,  2571,   946,  2572,   946,   582,
   967,   582,   965,   583,   966,  2572,   945,   583,
   966,  2572,   944,   584,   965,   583,   966,   584,
   964,   584,   964,   584,   964,   585,   965,   584,
   964,  2573,   944,   585,   963,   585,   964,   584,
   964,   584,   964,  2574,   943,  2573,   944,   585,
   964,   585,   963,   585,   964,   585,   963,   585,
   963,   608,   941,   588,   960,   586,   964,   605,
   943,   586,   962,   606,   943,   585,   963,   587,
   961,   606,   941,   607,   943,   586,   962,   606,
   942,   586,   962,   606,   943,   586,   962,  2572,944,   607,   941,   607,   941,  2573,   944,   607,
   942,   607,   942,   606,   943,   605,   943,   606,
   942,   606,   943,   605,   944,   605,   943,   605,
   943,   606,   943,   606,   942,   605,   940,   609,
   944,   604,   945,   604,   944,   605,   943,   606,
   942,  2573,   943,  2574,   943,   607,   942,  2573,
   943,   607,   942,   606,   941,  2574,   943,   608,
   942};


const unsigned int H[] PROGMEM = {27738,   612,   937,   610,   938,  2573,   943,  2573,
   943,   611,   938,   611,   937,  2573,   943,  2574,
   942,  2575,   943,   610,   938,   611,   937,   611,
   937,   611,   937,   612,   937,  2574,   943,   612,
   936,  2575,   942,   612,   936,   613,   936,   612,
   937,   611,   937,   612,   936,   612,   936,   613,
   937,  2574,   942,   611,   938,   611,   937,   612,
   937,   611,   937,  2574,   942,  2574,   942,  2575,
   942,   611,   937,   611,   938,   611,   937,   612,
   936,   613,   936,   612,   937,   611,   937,   611,
   938,   609,   939,   612,   936,   612,   937,   586,
   962,   610,   939,   610,   938,   609,   939,   607,
   941,  2574,   944,   586,   962,   609,   940,   607,
   941,   607,   941,  2573,   943,  2574,   943,  2573,
   943,   586,   963,   586,   962,   556,   993,   586,
   962,   586,   963,   586,   962,   586,   963,   585,
   963,   586,   962,   585,   964,   587,   962,   585,
   963,  2574,   943,   586,   963,  2572,   944,  2573,
   944,  2573,   943,   586,   962,  2573,   944,  2573,
   944,   586,   963,   586,   962,   586,   962,  2573,
   943
};


const unsigned int I[] PROGMEM = {28069,   577,   973,   576,   972,  2524,   994,  2524,
   994,   576,   972,   578,   972,  2523,   995,  2522,
   996,  2523,   994,   576,   973,   577,   971,   578,
   973,   575,   973,   577,   973,  2522,   995,   576,
   973,  2523,   995,   576,   973,   577,   972,   576,
   973,   576,   972,   577,   972,   577,   972,   576,
   973,   576,   973,   576,   972,   576,   973,   576,
   973,  2521,   996,   576,   974,   575,   973,   576,
   974,   576,   973,   576,   974,   575,   974,   576,
   972,   577,   973,   576,   974,   575,   974,   575,
   974,   575,   975,   574,   975,   575,   974,   575,
   974,   575,   974,   575,   975,   574,   976,   573,
  1001,   548,  1005,   543,  1006,  2491,  1028,  2489, 1030,   540,  1011,  2486,  1035,   535,  1014,   535,
  1011,   538,   978,   571,   945,   604,   920,   629,
   918,   631,   916,   632,   941,   608,   941,   607,
   942,   608,   941,   608,   941,   609,   940,   609,
   941,   607,   942,   608,   941,  2576,   942,  2576,
   943,  2576,   944,   606,   943,   605,   944,   605,
   944,  2574,   943,   606,   943,  2574,   943,  2576,
   944};


const unsigned int J[] PROGMEM = {17714,   612,   937,   612,   936,  2576,   941,  2576,
   941,   613,   936,   613,   937,  2575,   941,  2576,
   942,  2576,   942,  2576,   942,  2575,   943,   587,
   962,   584,   965,   586,   962,  2575,   942,   606,
   942,  2575,   943,   607,   942,   606,   942,   607,
   942,   606,   943,   607,   942,   586,   962,   606,
   943,  2574,   943,   587,   963,   585,   963,   606,
   943,  2573,   944,   605,   944,   606,   943,  2572,
   945,   606,   942,   606,   943,   605,   944,   606,
   942,   586,   963,   587,   962,   607,   941,   586,
   963,   586,   962,   587,   962,   586,   962,   586,
   963,   586,   962,   586,   962,   587,   963,   586,
   962,   586,   962,   587,   962,   586,   963,  2573,944,   587,   961,  2573,   943,   606,   943,   606,
   942,   605,   943,   606,   943,   605,   943,   606,
   943,   606,   943,   606,   943,   606,   942,   606,
   942,   607,   942,   607,   942,   606,   942,   607,
   942,   607,   941,   608,   941,   608,   941,   607,
   941,  2575,   942,  2574,   943,   608,   940,   608,
   941,  2574,   941,  2576,   941,   609,   939,  2576,
   941};


const unsigned int K[] PROGMEM = {40582,   537,  1014,   535,  1014,  2483,  1034,  2484,
  1035,   536,  1014,   535,  1015,  2482,  1035,  2484,
  1034,  2484,  1034,   536,  1013,   536,  1013,   537,
  1011,   538,  1012,   537,  1012,  2485,  1033,   539,
  1009,  2487,  1031,   539,  1010,   539,  1010,   538,
  1011,   539,  1011,   538,  1010,   538,  1011,   539,
  1011,   537,  1012,   537,  1012,   537,  1012,   537,
  1012,  2485,  1033,   537,  1012,  2484,  1033,   537,
  1013,   536,  1014,   535,  1014,   536,  1013,   535,
  1014,   534,  1014,   536,  1014,   535,  1014,   535,
  1010,   539,   979,   571,   976,   573,   975,   574,
   946,   603,   947,   601,   946,   603,   946,   603,
   945,   604,   945,   604,   946,  2573,   945,  2572, 970,   579,   946,  2572,   971,  2547,   973,  2545,
   973,   576,   973,   575,   973,   576,   973,   576,
   971,   577,   948,   602,   946,   603,   945,   604,
   945,   603,   944,   605,   944,   606,   942,   608,
   941,   608,   941,   608,   940,  2578,   940,  2578,
   916,  2603,   915,   635,   937,   612,   937,   613,
   935,   614,   936,  2582,   936,  2582,   938,   612,
   936};



const unsigned int L[] PROGMEM = {36246,   581,   969,   580,   970,  2527,   990,  2528,
   991,   580,   969,   580,   970,  2527,   991,  2527,
   991,  2527,   991,   579,   970,   580,   969,   580,
   969,   580,   969,   580,   969,  2527,   991,   579,
   970,  2527,   990,   581,   969,   580,   969,   579,
   970,   580,   969,   580,   968,   581,   968,   580,
   969,   581,   969,   580,   968,   580,   969,   580,
   970,  2527,   991,   580,   969,  2527,   991,  2527,
   991,   580,   969,   579,   970,   580,   969,   580,
   969,   580,   968,   581,   970,   579,   970,   579,
   969,   581,   969,   580,   970,   579,   969,   580,
   970,   580,   969,   580,   970,   580,   969,   580,
   969,   581,   969,   580,   969,   581,   969,   579,
   970,   579,   970,   580,   969,   580,   970,  2526,
   992,   579,   970,   580,   969,   580,   970,   579, 970,   580,   969,   580,   969,   580,   969,   580,
   970,   579,   970,   580,   970,   579,   970,   580,
   970,   580,   970,  2525,   994,   578,   971,   578,
   972,  2524,   995,   577,   971,  2524,   996,  2523,
   995,  2523,   996,   576,   973,  2523,   993,   578,
   974
};


const unsigned int M[] PROGMEM = {5619,   588,   961,   587,   961,  2574,   942,  2575,
   943,   586,   962,   586,   963,  2574,   941,  2574,
   944,  2574,   943,  2573,   943,  2573,   942,   586,
   962,   586,   963,   586,   963,  2573,   943,   585,
   963,  2574,   942,   586,   962,   586,   963,   585,
   963,   585,   963,   586,   961,   587,   962,   586,
   962,  2574,   942,   585,   964,   585,   963,   585,
   963,  2574,   943,  2574,   942,   587,   962,   587,
   962,   586,   963,   585,   963,   586,   963,   585,
   963,   586,   964,   584,   964,   585,   963,   586,
   963,   585,   964,   584,   964,   584,   965,   583,
   965,   584,   965,   584,   964,   585,   963,   585,
   964,   584,   964,   584,   965,   584,   964,  2572,
   945,   584,   965,  2571,   945,   585,   964,  2572,944,   584,   964,   585,   964,   585,   963,   585,
   965,   583,   965,   584,   964,   584,   965,   584,
   964,   584,   965,   584,   963,   585,   964,   584,
   964,   584,   964,   584,   964,   585,   964,   584,
   965,  2570,   945,  2552,   965,   584,   965,   583,
   965,  2571,   945,   585,   964,   584,   964,  2571,
   945};


const unsigned int N[] PROGMEM = { 29431,   586,   963,   585,   964,  2574,   943,  2575,
   943,   586,   963,   585,   964,  2574,   944,  2574,
   944,  2574,   943,   586,   964,   585,   964,   585,
   964,   585,   964,   585,   964,  2574,   944,   585,
   964,  2573,   945,   584,   965,   585,   964,   584,
   965,   585,   964,   584,   965,   584,   964,   584,
   965,  2573,   944,   584,   964,   586,   963,   585,
   964,  2573,   945,  2573,   944,   584,   965,  2573,
   945,   584,   964,   585,   964,   585,   965,   585,
   964,   584,   964,   585,   965,   584,   965,   584,
   964,   585,   964,   584,   964,   585,   964,   585,
   965,   585,   964,   584,   965,   584,   964,   585,
   965,  2572,   944,   586,   964,  2573,   943,   586,
   963,  2573,   945,   585,   964,   584,   964,  2572,
   944,   605,   944,   586,   963,   584,   964,   585,
   964,   584,   964,   586,   964,   585,   963,   585,
   964,   585,   964,   585,   964,   584,   965,   586,
   963,  2572,   946,   584,   964,  2572,   945,  2572,
   945,  2573,   945,   586,   962,   586,   963,   586,
   963,  2572,   945,   586,   963,   585,   964,  2573,
   945};

const unsigned int O[] PROGMEM = {30951,   587,   962,   586,   963,  2574,   943,  2573,
   943,   586,   962,   587,   962,  2575,   942,  2575,
   942,  2574,   943,  2574,   942,  2574,   943,   585,
   964,   585,   962,   586,   962,  2575,   943,   585,
   963,  2574,   943,   585,   963,   586,   963,   585,
   963,   585,   963,   586,   964,   584,   964,   585,
   963,  2574,   943,   586,   963,   586,   963,   585,
   964,  2574,   943,  2574,   943,  2574,   943,   586,
   963,   586,   963,   585,   963,   585,   963,   586,
   963,   586,   963,   585,   963,   585,   964,   585,
   963,   585,   964,   585,   964,   584,   964,   584,
   964,   585,   964,   585,   964,   584,   964,   585,
   964,   584,   964,   584,   964,   584,   965,  2573,
   943,   586,   964,  2573,   942,  2574,   944,  2574,943,   585,   962,   585,   964,   586,   963,   584,
   965,   584,   964,   584,   965,   584,   964,   585,
   963,   585,   962,   586,   964,   585,   963,   584,
   964,   585,   964,   585,   963,   585,   964,   585,
   963,  2573,   944,  2573,   944,   586,   962,   586,
   963,   585,   964,  2573,   943,   586,   962,  2574,
   944};




  
void setup() {

  pinMode (irLED, OUTPUT); digitalWrite(irLED,LOW);  // D10 normally output low = IR LED off
  pinMode (LED_BUILTIN, OUTPUT);                     // indicator LED
  digitalWrite(LED_BUILTIN,LOW);
  TCCR1A = bit (WGM10) | bit (WGM11);                // fast PWM, normal port
  TCCR1B = bit (WGM12) | bit (WGM13);                // fast PWM, timer stopped
  first1 = 1;                                        // first blob needs adjustment
  TIMSK1 = bit (OCIE1B);                             // enable interrupt - each cycle

  Serial.begin(9600);
  Serial.println("Type to send the IR command.");
}

void loop() {

  if (Serial.available()) {
        String input = Serial.readStringUntil('\n'); // Read input until newline

        if (input.equalsIgnoreCase("on")) { // Check if input is "on"
            sendRaw (ON , sizeof(ON) / sizeof(ON[0]), 38);               // Send an array of raw data, KHz
            Serial.println("AC ON");
        } 

        else if (input.equalsIgnoreCase("off")) { 
            sendRaw(OFF, sizeof(OFF) / sizeof(OFF[0]), 38);
            Serial.println("AC OFF");}

        else if (input.equalsIgnoreCase("16")) { 
            sendRaw(A, sizeof(A) / sizeof(A[0]), 38);
            Serial.println("Temperature = 16°C");}

        else if (input.equalsIgnoreCase("17")) { 
            sendRaw(B, sizeof(B) / sizeof(B[0]), 38);
            Serial.println("Temperature = 17°C");}

        else if (input.equalsIgnoreCase("18")) { 
            sendRaw(C, sizeof(C) / sizeof(C[0]), 38);
            Serial.println("Temperature = 18°C");}

        else if (input.equalsIgnoreCase("19")) { 
            sendRaw(D, sizeof(D) / sizeof(D[0]), 38);
            Serial.println("Temperature = 19°C");}

        else if (input.equalsIgnoreCase("20")) { 
            sendRaw(E, sizeof(E) / sizeof(E[0]), 38);
            Serial.println("Temperature = 20°C");}

        else if (input.equalsIgnoreCase("21")) { 
            sendRaw(F, sizeof(F) / sizeof(F[0]), 38);
            Serial.println("Temperature = 21°C");}

        else if (input.equalsIgnoreCase("22")) { 
            sendRaw(G, sizeof(G) / sizeof(G[0]), 38);
            Serial.println("Temperature = 22°C");}

        else if (input.equalsIgnoreCase("23")) { 
            sendRaw(H, sizeof(H) / sizeof(H[0]), 38);
            Serial.println("Temperature = 23°C");}

        else if (input.equalsIgnoreCase("24")) { 
            sendRaw(I, sizeof(I) / sizeof(I[0]), 38);
            Serial.println("Temperature = 24°C");}

        else if (input.equalsIgnoreCase("25")) { 
            sendRaw(J, sizeof(J) / sizeof(J[0]), 38);
            Serial.println("Temperature = 25°C");}

        else if (input.equalsIgnoreCase("26")) { 
            sendRaw(K, sizeof(K) / sizeof(K[0]), 38);
            Serial.println("Temperature = 26°C");}

        else if (input.equalsIgnoreCase("27")) { 
            sendRaw(L, sizeof(L) / sizeof(L[0]), 38);
            Serial.println("Temperature = 27°C");}

        else if (input.equalsIgnoreCase("28")) { 
            sendRaw(M, sizeof(M) / sizeof(M[0]), 38);
            Serial.println("Temperature = 28°C");}

        else if (input.equalsIgnoreCase("29")) { 
            sendRaw(N, sizeof(N) / sizeof(N[0]), 38);
            Serial.println("Temperature = 29°C");}

        else if (input.equalsIgnoreCase("30")) { 
            sendRaw(O, sizeof(O) / sizeof(O[0]), 38);
            Serial.println("Temperature = 30°C");}
            
        
        else {


            Serial.println("Invalid command...");
        }
    }                                          
}

void sendRaw(const unsigned int buf[], unsigned int len, unsigned int hz) {

  oldTIMSK0 = TIMSK0;                                // disable millis interrupt
  TIMSK0 = 0;
  digitalWrite(LED_BUILTIN, HIGH);                   // indicator LED on
  irK = 0;
  oldirK = 0;
  countDiv = (1024000 + (hz/2)) / hz;                // rounded number of hz cycles * 1024
  halfDiv = (countDiv + 1) / 2;                      // half of countDiv
  irCount = Calculate(pgm_read_word_near(buf)) + first1;  // timer count for first value of array
  newirCount = Calculate(pgm_read_word_near(buf+1)); //    and second value
  first1 = 0;
  OCR1A = (((F_CPU/1000) +hz/2) / hz) - 1;           // TOP, zero relative
  OCR1B = OCR1A / 3;                                 // 33% duty cycle
  TCNT1 = OCR1A / 2;                                 // timer count just past OCR1B
  TCCR1A |= bit (COM1B1);                            // clear output on B match
  TCCR1B |= bit (CS10);                              // fast PWM, no prescaler, timer on

  while (irK < len) {
    while (oldirK == irK);                           // wait for interrupt
    if (irK < (len - 1)) newirCount = Calculate (pgm_read_word_near(buf+(irK+1)));
    oldirK = irK;
  }
  TCCR1B &= ~bit(CS10);                              // stop clock
  TCCR1A &= ~bit(COM1B1);                            // disconnect output
  TIMSK0 = oldTIMSK0;                                // re-enable millis
  digitalWrite(LED_BUILTIN, LOW);                    // indicator LED off
}

unsigned int Calculate (unsigned int buf) {          // calculate number of timer cycles
  long temp = buf;
  return ((temp << 10) + halfDiv) / countDiv;
}

ISR(TIMER1_COMPB_vect) {                             // interrupt when output cleared at OCR1B
  irCount--;
  if (irCount == 0) {
    TCCR1A ^= bit (COM1B1);                          // Connect or disconnect D10 to Timer1 output
    irK++;
    irCount = newirCount;                            // get next value
  }
}
